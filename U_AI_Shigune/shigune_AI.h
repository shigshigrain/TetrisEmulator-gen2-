#pragma once
#include "tetris_engine.hpp"
#include "GameContainer.hpp"

// shigune : main part of AI and do decide act;


static std::mutex AiMtx;

const std::vector<int> cx = { -1, 0, 1 };
const std::vector<int> cy = { -1, 0, 1 };


const std::vector<std::pair<int, int>> cc = {
	{1, 0},
	{-1, 0},
	{0, 1},
	{0, -1}
};

const std::vector<int> scr_rate = { 100, 95, 95, 95, 90, 90, 90, 90 ,80, 80, 80, 70, 70, 70 ,60, 60, 60, 50, 50, 50 };

const std::vector<int> NS_a = { 6, 1, 5, 7, 2, 3, 4 };

const std::vector<int> ev_empty = { 0, 0, 0, 0 ,0 ,0 ,0 ,0 ,0 ,0 };

const vector<vector<vector<int>>> ch = {

	{
		{1, 1, 1, 1},
		{0, 0, 1, 0},
		{1, 1, 1, 1},
		{0, 1, 0, 0}
	},

	{
		{1, 1, 1},
		{0, 1, 1},
		{1, 1, 1},
		{1, 1, 0}
	},

	{
		{1, 1, 1},
		{0, 1, 1},
		{1, 1, 1},
		{1, 1, 0}
	},

	{
		{0, 1, 1, 0},
		{0, 1, 1, 0},
		{0, 1, 1, 0},
		{0, 1, 1, 0}
	},

	{
		{1, 1, 1},
		{0, 1, 1},
		{1, 1, 1},
		{1, 1, 0}
	},

	{
		{1, 1, 1},
		{0, 1, 1},
		{1, 1, 1},
		{1, 1, 0}
	},

	{
		{1, 1, 1},
		{0, 1, 1},
		{1, 1, 1},
		{1, 1, 0}
	},

};

const std::vector<std::vector<int>> base_cmd = {

	{6, 6, 6, 6, 6, 3},
	{6, 6, 6, 6, 3},
	{6, 6, 6, 3},
	{6, 6, 3},
	{6, 3},
	{3},
	{7, 3},
	{7, 7, 3},
	{7, 7, 7, 3},
	{7, 7, 7, 7, 3},
	{7, 7, 7, 7, 7, 3},
	{5, 6, 6, 6, 6, 6, 3},
	{5, 6, 6, 6, 6, 3},
	{5, 6, 6, 6, 3},
	{5, 6, 6, 3},
	{5, 6, 3},
	{5, 3},
	{5, 7, 3},
	{5, 7, 7, 3},
	{5, 7, 7, 7, 3},
	{5, 7, 7, 7, 7, 3},
	{5, 7, 7, 7, 7, 7, 3},
	{4, 6, 6, 6, 6, 6, 3},
	{4, 6, 6, 6, 6, 3},
	{4, 6, 6, 6, 3},
	{4, 6, 6, 3},
	{4, 6, 3},
	{4, 3},
	{4, 7, 3},
	{4, 7, 7, 3},
	{4, 7, 7, 7, 3},
	{4, 7, 7, 7, 7, 3},
	{4, 7, 7, 7, 7, 7, 3},
	{5, 6, 5, 6, 6, 6, 6, 3},
	{5, 6, 5, 6, 6, 6, 3},
	{5, 6, 5, 6, 6, 3},
	{5, 6, 5, 6, 3},
	{5, 6, 5, 3},
	{5, 5, 3},
	{5, 7, 5, 3},
	{5, 7, 5, 7, 3},
	{5, 7, 5, 7, 7, 3},
	{5, 7, 5, 7, 7, 7, 3},
	{1, 6, 6, 6, 6, 3},
	{1, 6, 6, 6, 3},
	{1, 6, 6, 3},
	{1, 6, 3},
	{1, 3},
	{1, 7, 3},
	{1, 7, 7, 3},
	{1, 7, 7, 7, 3},
	{1, 7, 7, 7, 7, 3},
	{1, 7, 7, 7, 7, 7, 3},
	{1, 5, 6, 6, 6, 6, 6, 3},
	{1, 5, 6, 6, 6, 6, 3},
	{1, 5, 6, 6, 6, 3},
	{1, 5, 6, 6, 3},
	{1, 5, 6, 3},
	{1, 5, 3},
	{1, 5, 7, 3},
	{1, 5, 7, 7, 3},
	{1, 5, 7, 7, 7, 3},
	{1, 5, 7, 7, 7, 7, 3},
	{1, 5, 7, 7, 7, 7, 7, 3},
	{1, 4, 6, 6, 6, 6, 6, 3},
	{1, 4, 6, 6, 6, 6, 3},
	{1, 4, 6, 6, 6, 3},
	{1, 4, 6, 6, 3},
	{1, 4, 6, 3},
	{1, 4, 3},
	{1, 4, 7, 3},
	{1, 4, 7, 7, 3},
	{1, 4, 7, 7, 7, 3},
	{1, 4, 7, 7, 7, 7, 3},
	{1, 4, 7, 7, 7, 7, 7, 3},
	{1, 5, 6, 5, 6, 6, 6, 6, 3},
	{1, 5, 6, 5, 6, 6, 6, 3},
	{1, 5, 6, 5, 6, 6, 3},
	{1, 5, 6, 5, 6, 3},
	{1, 5, 6, 5, 3},
	{1, 5, 5, 3},
	{1, 5, 7, 5, 3},
	{1, 5, 7, 5, 7, 3},
	{1, 5, 7, 5, 7, 7, 3},
	{1, 5, 7, 5, 7, 7, 7, 3},
	{1, 5, 7, 5, 7, 7, 7, 7, 3},

};

const std::vector<std::vector<int>> BaseCmdS = {

	{6, 6, 6, 6, 6},
	{6, 6, 6, 6},
	{6, 6, 6},
	{6, 6},
	{6},
	{ },
	{7},
	{7, 7},
	{7, 7, 7},
	{7, 7, 7, 7},
	{7, 7, 7, 7, 7},
	{5, 6, 6, 6, 6, 6},
	{5, 6, 6, 6, 6},
	{5, 6, 6, 6},
	{5, 6, 6},
	{5, 6},
	{5},
	{5, 7},
	{5, 7, 7},
	{5, 7, 7, 7},
	{5, 7, 7, 7, 7},
	{5, 7, 7, 7, 7, 7},
	{4, 6, 6, 6, 6, 6},
	{4, 6, 6, 6, 6},
	{4, 6, 6, 6},
	{4, 6, 6},
	{4, 6},
	{4},
	{4, 7},
	{4, 7, 7},
	{4, 7, 7, 7},
	{4, 7, 7, 7, 7},
	{4, 7, 7, 7, 7, 7},
	{5, 6, 5, 6, 6, 6, 6},
	{5, 6, 5, 6, 6, 6},
	{5, 6, 5, 6, 6},
	{5, 6, 5, 6},
	{5, 6, 5},
	{5, 5},
	{5, 7, 5},
	{5, 7, 5, 7},
	{5, 7, 5, 7, 7},
	{5, 7, 5, 7, 7, 7},
	{1, 6, 6, 6, 6},
	{1, 6, 6, 6},
	{1, 6, 6},
	{1, 6},
	{1},
	{1, 7},
	{1, 7, 7},
	{1, 7, 7, 7},
	{1, 7, 7, 7, 7},
	{1, 7, 7, 7, 7, 7},
	{1, 5, 6, 6, 6, 6, 6},
	{1, 5, 6, 6, 6, 6},
	{1, 5, 6, 6, 6},
	{1, 5, 6, 6},
	{1, 5, 6},
	{1, 5},
	{1, 5, 7},
	{1, 5, 7, 7},
	{1, 5, 7, 7, 7},
	{1, 5, 7, 7, 7, 7},
	{1, 5, 7, 7, 7, 7, 7},
	{1, 4, 6, 6, 6, 6, 6},
	{1, 4, 6, 6, 6, 6},
	{1, 4, 6, 6, 6},
	{1, 4, 6, 6},
	{1, 4, 6},
	{1, 4},
	{1, 4, 7},
	{1, 4, 7, 7},
	{1, 4, 7, 7, 7},
	{1, 4, 7, 7, 7, 7},
	{1, 4, 7, 7, 7, 7, 7},
	{1, 5, 6, 5, 6, 6, 6, 6},
	{1, 5, 6, 5, 6, 6, 6},
	{1, 5, 6, 5, 6, 6},
	{1, 5, 6, 5, 6},
	{1, 5, 6, 5},
	{1, 5, 5},
	{1, 5, 7, 5},
	{1, 5, 7, 5, 7},
	{1, 5, 7, 5, 7, 7},
	{1, 5, 7, 5, 7, 7, 7},
	{1, 5, 7, 5, 7, 7, 7, 7},

};

const std::vector<std::vector<int>> BaseCmdD = {

	{6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{4, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 5, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 5, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 5, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 6, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 5, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 5, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{5, 7, 5, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 4, 7, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 5, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 5, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 5, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 6, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 5, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 5, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 5, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
	{1, 5, 7, 5, 7, 7, 7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},

};

const std::vector<int> TestMove_soft = { 6, 7, 4, 5 };		// ソフトドロップからの左右移動・回転入れ
const std::vector<int> TestMove_side = { 2, 6, 7, 4, 5 };	// 途中横入れ・回転入れ

const vector<vector<vector<pair<int, int>>>> touch_list = {

	// I
	{
		{
			{0, -1},
			{0, 4},
			{2, 4},
			{2, -1},
			{0, 0},
			{0, 1},
			{0, 2},
			{0, 3},
			{1, 4},
			{2, 3},
			{2, 2},
			{2 ,1},
			{2, 0},
			{1, -1}
		},
		{
			{-1, 1},
			{-1, 3},
			{4, 3},
			{4, 1},
			{-1, 2},
			{0, 3},
			{1, 3},
			{2, 3},
			{3, 3},
			{4, 2},
			{3, 1},
			{2 ,1},
			{1, 1},
			{0, 1}
		},
		{
			{1, -1},
			{1, 4},
			{3, 4},
			{3, -1},
			{1, 0},
			{1, 1},
			{1, 2},
			{1, 3},
			{2, 4},
			{3, 3},
			{3, 2},
			{3 ,1},
			{3, 0},
			{2, -1}
		},
		{
			{-1, 0},
			{-1, 2},
			{4, 2},
			{4, 0},
			{-1, 1},
			{0, 2},
			{1, 2},
			{2, 2},
			{3, 2},
			{4, 1},
			{3, 0},
			{2 ,0},
			{1, 0},
			{0, 0}
		}
	},
	// J
	{
		{
			{-1, -1},
			{-1, 1},
			{0, 3},
			{2, 3},
			{2, -1},

			{-1, 0},
			{0, 1},
			{0, 2},
			{1, 3},
			{2, 2},
			{2, 1},
			{2, 0},
			{1 ,-1},
			{0, -1}
		},
		{
			{-1, 0},
			{-1, 3},
			{1, 3},
			{3, 2},
			{3, 0},

			{-1, 1},
			{-1, 2},
			{0, 3},
			{1, 2},
			{2, 2},
			{3, 1},
			{2, 0},
			{1 ,0},
			{0, 0}
		},
		{
			{0, -1},
			{0, 3},
			{3, 3},
			{3, 1},
			{2, -1},
			{0, 0},
			{0, 1},
			{0, 2},
			{1, 3},
			{2, 3},
			{3, 2},
			{2, 1},
			{2, 0},
			{1, -1}
		},
		{
			{-1, 0},
			{-1, 2},
			{3, 2},
			{3, -1},
			{1, -1},
			{-1, 1},
			{0, 2},
			{1, 2},
			{2, 2},
			{3, 1},
			{3, 0},
			{2, -1},
			{1 ,0},
			{0, 0}
		}
	},
	// L
	{
		{
			{-1, 1},
			{-1, 3},
			{3, 3},
			{3, -1},
			{0, -1},
			{-1, 2},
			{0, 3},
			{1, 3},
			{2, 2},
			{2, 1},
			{2, 0},
			{1, -1},
			{0 ,0},
			{0, 1}
		},
		{
			{-1, 0},
			{-1, 2},
			{1, 3},
			{3, 3},
			{3, 0},
			{-1, 1},
			{0, 2},
			{1, 2},
			{2, 3},
			{3, 2},
			{3, 1},
			{2, 0},
			{1 ,0},
			{0, 0}
		},
		{
			{0, -1},
			{0, 3},
			{2, 3},
			{3, 1},
			{3, -1},
			{0, 0},
			{0, 1},
			{0, 2},
			{1, 3},
			{2, 2},
			{2, 1},
			{3, 0},
			{2, -1},
			{1, -1}
		},
		{
			{-1, -1},
			{-1, 2},
			{3, 2},
			{3, 0},
			{1, -1},
			{-1, 0},
			{-1, 1},
			{0, 2},
			{1, 2},
			{2, 2},
			{3, 1},
			{2, 0},
			{1 ,0},
			{0, -1}
		}
	
	},
	// O
	{
		{
			{-1, 0},
			{-1, 3},
			{2, 3},
			{2, 0},
			{-1, 1},
			{-1, 2},
			{0, 3},
			{1, 3},
			{2, 2},
			{2, 1},
			{1, 0},
			{0 ,0}
		},
		{
			{-1, 0},
			{-1, 3},
			{2, 3},
			{2, 0},
			{-1, 1},
			{-1, 2},
			{0, 3},
			{1, 3},
			{2, 2},
			{2, 1},
			{1, 0},
			{0 ,0}
		},
		{
			{-1, 0},
			{-1, 3},
			{2, 3},
			{2, 0},
			{-1, 1},
			{-1, 2},
			{0, 3},
			{1, 3},
			{2, 2},
			{2, 1},
			{1, 0},
			{0 ,0}
		},
		{
			{-1, 0},
			{-1, 3},
			{2, 3},
			{2, 0},
			{-1, 1},
			{-1, 2},
			{0, 3},
			{1, 3},
			{2, 2},
			{2, 1},
			{1, 0},
			{0 ,0}
		}
	},
	// S
	{
		{
			{-1, 0},
			{-1, 3},
			{1, 3},
			{2, 2},
			{2, -1},
			{0, -1},
			{-1, 1},
			{-1, 2},
			{0, 3},
			{1, 2},
			{2, 1},
			{2, 0},
			{1, -1},
			{0 ,0}
		},
		{
			{-1, 0},
			{-1, 2},
			{0, 3},
			{3, 3},
			{3, 1},
			{2, 0},
			{-1, 1},
			{0, 2},
			{1, 3},
			{2, 3},
			{3, 2},
			{2, 1},
			{1, 0},
			{0 ,0}
		},
		{
			{0, 0},
			{0, 3},
			{2, 3},
			{3, 2},
			{3, -1},
			{1, -1},
			{0, 1},
			{0, 2},
			{1, 3},
			{2, 2},
			{3, 1},
			{3, 0},
			{2, -1},
			{1 ,0}
		},
		{
			{-1, -1},
			{-1, 1},
			{0, 2},
			{3, 2},
			{3, 0},
			{2, -1},
			{-1, 0},
			{0, 1},
			{1, 2},
			{2, 2},
			{3, 1},
			{2, 0},
			{1, -1},
			{0 ,-1}
		}
	},
	// T
	{
		{
			{-1, 0},
			{-1, 2},
			{0, 3},
			{2, 3},
			{2, -1},
			{0, -1},
			{-1, 1},
			{0, 2},
			{1, 3},
			{2, 2},
			{2, 1},
			{2, 0},
			{1, -1},
			{0 ,0}
		},
		{
			{-1, 0},
			{-1, 2},
			{0, 3},
			{2, 3},
			{3, 2},
			{3, 0},
			{-1, 1},
			{0, 2},
			{1, 3},
			{2, 2},
			{3, 1},
			{2, 0},
			{1, 0},
			{0 ,0}
		},
		{
			{0, -1},
			{0, 3},
			{2, 3},
			{3, 2},
			{3, 0},
			{2, -1},
			
			{0, 0},
			{0, 1},
			{0, 2},
			{1, 3},
			{2, 2},
			{3, 1},
			{2, 0},
			{1 ,-1}
		},
		{
			{-1, 0},
			{-1, 2},
			{3, 2},
			{3, 0},
			{2, -1},
			{0, -1},
			
			{-1, 1},
			{0, 2},
			{1, 2},
			{2, 2},
			{3, 1},
			{2, 0},
			{1 ,-1},
			{0, 0}
		}
	},
	// Z
	{
		{
			{-1, -1},
			{-1, 2},
			{0, 3},
			{2, 3},
			{2, 0},
			{1, -1},
			{-1, 0},
			{-1, 1},
			{0, 2},
			{1, 3},
			{2, 2},
			{2, 1},
			{1, 0},
			{0 ,-1}
		},
		{
			{-1, 1},
			{-1, 3},
			{2, 3},
			{3, 2},
			{3, 0},
			{0, 0},
			{-1, 2},
			{0, 3},
			{1, 3},
			{2, 2},
			{3, 1},
			{2, 0},
			{1, 0},
			{0 ,1}
		},
		{
			{0, -1},
			{0, 2},
			{1, 3},
			{3, 3},
			{3, 0},
			{2, -1},
			{0, 0},
			{0, 1},
			{1, 2},
			{2, 3},
			{3, 2},
			{3, 1},
			{2, 0},
			{1 ,-1}
		},
		{
			{-1, 0},
			{-1, 2},
			{2, 2},
			{3, 1},
			{3, -1},
			{0, -1},
			{-1, 1},
			{0, 2},
			{1, 2},
			{2, 1},
			{3, 0},
			{2, -1},
			{1, -1},
			{0 ,0}
		}
	},

};

namespace shig {
	// hold : 1, soft : 2, hard : 3, L_rot : 4, R_rot : 5, l_move : 6, r_move : 7;

	class AiShigune
	{
	private:
		int identifier;
		int mind;
		int hold_AI;
		int current_AI;
		int pc_cnt;
		int SRS_kind;
		int TS_kind;
		int combo;
		int btb;
		int height_sum;
		int height_mxm;
		int ttrp_size;
		int ttrp_ofsY;
		size_t exp_cyc_lim;
		bool ttrp_able;
		std::vector<int> next_AI;
		deque<int> q_next_AI;
		std::vector<std::vector<int>> field_AI;
		std::vector<std::vector<int>> p_field_AI;
		std::vector<std::vector<int>> s_field_AI;
		std::vector<int> height;
		std::vector<int> cmd_list;
		std::vector<std::string> ttrp_name_list;
		std::vector<int> ttrp_id_list;
		vector<TetriPlate> ttrp_list;
		std::vector<int> ttrp_bgnF;
		TetriPlate select_ttrp;
		std::vector<GameContainer> gc_slot;
		GameContainer now_gc;
		std::vector<CmdPattern> s_branch;

	public:
		AiShigune();
		AiShigune(int ii);
		AiShigune(const TetriEngine& ti);
		//AiShigune(const AiShigune& copyAi);
		bool thinking();
		vector<int> get_recent_cmd();
		bool makeAiSuggestion();
		bool makeAiSuggestion(std::mutex& up);
		vector<vector<int>> getSuggestionAi() const;
		vector<vector<int>> getSuggestionAi(std::mutex& up);
		void SetupField();
		void SetupState();
		vector<int> make_order_list();
		vector<int> make_order_list(GameContainer& gc);
		bool strategy_mark();
		bool CheckPC();
		void bgn_strategy();
		vector<CmdPattern> search_way(GameContainer gc, int loop);
		void do_sw(vector<CmdPattern> &ctl, GameContainer gc, size_t loop);
		bool explore_choices(GameContainer gc_org);
		void CalcScore(CmdPattern& cd, GameContainer& gcs, size_t loopc);
		LL gs_BFS(CmdPattern& cb, std::vector<std::vector<int>>& qf);
		bool height_calc(GameContainer& gch);
		bool CheckMove(int to_x, int to_y, Tetri& s_check, GameContainer& ggc);
		int  NextRotate(int n_rot, Rotate rt);
		bool CheckSRS_Clockwise(Tetri& s_now, GameContainer& ggc);
		bool CheckSRS_CounterClock(Tetri& s_now, GameContainer& ggc);
		int TS_check(int toX, int toY, Tetri& ts, GameContainer& ggc);
		set<int> CheckErase(Tetri& s_now, GameContainer &gce);
		void ApplyMino(std::vector<std::vector<int>>& c_field, const Tetri& s_now);
		bool MoveMino(Tetri& m_now, int s_action, GameContainer& ggc);
		void PrintGhost(const Tetri& s_now);
		std::pair<int, std::string> get_sttrp_name();
		bool load_ttrp();
		bool ttrp_crr(Tetri& now_p, int& size_l);
		bool ttrp_check(CmdPattern& slc, int& sle, std::vector<int>& mnL);
		bool ttrp_check(CmdPattern& slc, int& sle, GameContainer& gct);
		bool next_crr_check();
		bool set_gc(GameContainer &gc);
		GameContainer update_gc(CmdPattern& ct, GameContainer gcp);
		int ttrp_check_mino(Tetri& fd, GameContainer& gcf);
		void loadTE(const TetriEngine& te);
		CmdPattern getCmd(); // 呼び出し側で制御



		~AiShigune();
	};

	// 非同期処理用
	int32 ExeThinking(AiShigune& As, const std::atomic<bool>& abort, std::atomic<bool>& think, std::deque<int>& CmdListS);

}

namespace shig {
	bool GetTempNameList(std::vector<std::string>& name_list);
	bool ReadTempData(const std::string& name, shig::TetriPlate& ttrp);
}
